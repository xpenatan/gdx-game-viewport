apply from: 'dependencies.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: 'maven-publish'
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = "com.github.xpenatan"

    ext {
        repoUser = System.getenv('USER')
        repoPass = System.getenv('PASSWORD')
        repoUrl = ''
        repoUrlSnapshot = 'https://oss.sonatype.org/content/repositories/snapshots/'

        def localFile = project.rootProject.file("local.properties")
        if (localFile.exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            repoUser = properties.getProperty("xUser")
            repoPass = properties.getProperty("xPass")
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    publishing {
        repositories {
            maven {
                url {
                    def ver = project.version.toString()
                    def isSnapshot = ver.toUpperCase().contains("SNAPSHOT")
                    isSnapshot ? repoUrlSnapshot : repoUrl
                }
                credentials {
                    username repoUser
                    password repoPass
                }
            }
        }
    }
}

def containsTask(graph, toFind, useEqual) {
    def contains = false
    graph.allTasks.forEach { task ->
        if (task.path.contains(toFind))
            contains = true
    }
    return contains
}

// Disable building example from root parent
gradle.taskGraph.whenReady { graph ->
    def hasRootRunTask = containsTask(graph, ":build", true) && containsTask(graph, ":core", false) && containsTask(graph, ":examples:", false)
    if (hasRootRunTask) {
        graph.getAllTasks().each { task ->
            // disable all task from examples if the parent is executing
            def isExample = task.path.contains(":examples")
            task.enabled = !isExample
        }
    }
}
